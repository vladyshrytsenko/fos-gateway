apiVersion: v1
kind: Namespace
metadata:
  name: fos-namespace

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: fos-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
        - name: gateway
          image: fos-gateway-image
          ports:
            - containerPort: 8085
          envFrom:
            - configMapRef:
                name: fos-config
          env:
            - name: GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWED_ORIGINS
              value: http://localhost:4200
            - name: GATEWAY_ROUTES_FOS_AUTH_URI
              value: http://auth:9000
            - name: GATEWAY_ROUTES_FOS_CORE_URI
              value: http://core:8080

---

apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: fos-namespace
spec:
  selector:
    app: gateway
  ports:
    - protocol: TCP
      port: 8085
      targetPort: 8085
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
  namespace: fos-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
        - name: auth
          image: fos-auth-image
          ports:
            - containerPort: 9000
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://postgres-auth:5432/fos-auth-db
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_DATASOURCE_PASSWORD
              value: password

---

apiVersion: v1
kind: Service
metadata:
  name: auth
  namespace: fos-namespace
spec:
  selector:
    app: auth
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: core
  namespace: fos-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: core
  template:
    metadata:
      labels:
        app: core
    spec:
      containers:
        - name: core
          image: fos-core-image
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              value: ${CORE_DATASOURCE_URL}
            - name: SPRING_DATASOURCE_USERNAME
              value: ${CORE_DATASOURCE_USERNAME}
            - name: SPRING_DATASOURCE_PASSWORD
              value: ${CORE_DATASOURCE_PASSWORD}

---

apiVersion: v1
kind: Service
metadata:
  name: core
  namespace: fos-namespace
spec:
  selector:
    app: core
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-auth
  namespace: fos-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-auth
  template:
    metadata:
      labels:
        app: postgres-auth
    spec:
      containers:
        - name: postgres-auth
          image: postgres:15
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_DB
              value: fos-auth-db
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-auth-storage
      volumes:
        - name: postgres-auth-storage
          persistentVolumeClaim:
            claimName: postgres-auth-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-auth
  namespace: fos-namespace
spec:
  selector:
    app: postgres-auth
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-core
  namespace: fos-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-core
  template:
    metadata:
      labels:
        app: postgres-core
    spec:
      containers:
        - name: postgres-core
          image: postgres:15
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: ${CORE_DATASOURCE_USERNAME}
            - name: POSTGRES_PASSWORD
              value: ${CORE_DATASOURCE_PASSWORD}
            - name: POSTGRES_DB
              value: fos-core-db
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-core-storage
      volumes:
        - name: postgres-core-storage
          persistentVolumeClaim:
            claimName: postgres-core-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-core
  namespace: fos-namespace
spec:
  selector:
    app: postgres-core
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: fos-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:latest
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_DEFAULT_USER
              value: rab
            - name: RABBITMQ_DEFAULT_PASS
              value: "1234"
            - name: RABBITMQ_DEFAULT_VHOST
              value: vhost

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: fos-namespace
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672
      name: amqp
    - protocol: TCP
      port: 15672
      targetPort: 15672
      name: management

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-auth-pvc
  namespace: fos-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-auth-pv
  namespace: fos-namespace
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/postgres-auth/

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-core-pvc
  namespace: fos-namespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-core-pv
  namespace: fos-namespace
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/postgres-core/
